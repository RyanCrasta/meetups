{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ryan/practice/react/sec-23/06-onwards-to-a-bigger-project-starting-project/pages/index.js\";\nimport React from \"react\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\";\nimport Head from \"next/head\";\nconst DUMMY_MEETUPS = [{\n  id: \"meet1\",\n  title: \"Beautiful Lake\",\n  image: \"https://images.unsplash.com/photo-1503614472-8c93d56e92ce?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1111&q=80\",\n  address: \"Moraine Lake, Canada\"\n}, {\n  id: \"meet2\",\n  title: \"Northern Lights\",\n  image: \"https://images.unsplash.com/photo-1464054313797-e27fb58e90a9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1174&q=80\",\n  address: \"Jasper National Park, Jasper, Canada\"\n}];\n\nfunction HomePage(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"React Meetups\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"A huge list of good meeting places\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupList, {\n      meetups: props.meetups\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // 1st method\n// this code will run during build process\n// data fetching for pre-rendering\n\n\nexport async function getStaticProps() {\n  const client = await MongoClient.connect(\"mongodb+srv://meetmanager:ryanrocks99@cluster0.wr99p.mongodb.net/meets?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"places\");\n  const meetups = await meetupsCollection.find().toArray();\n  console.log(\"ALL MEETUPS\", meetups);\n  client.close(); // always return object\n\n  return {\n    // this will be set as props in HomePage component\n    props: {\n      meetups: meetups.map(meetup => ({\n        title: meetup.title,\n        address: meetup.address,\n        description: meetup.description,\n        image: meetup.image,\n        id: meetup._id.toString()\n      }))\n    },\n    // number of SEC nextJS will wait until it\n    // regenerates this page for incoming req\n    // if u have not set revalidate then this page\n    // will be generated just during BUILD process\n    revalidate: 10\n  };\n} // 2nd method\n// when u want to regenerate page for every\n// incoming request use getServerSideProps\n// it will run on server after deployment\n// export function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   };\n// }\n\nexport default HomePage;","map":{"version":3,"sources":["/home/ryan/practice/react/sec-23/06-onwards-to-a-bigger-project-starting-project/pages/index.js"],"names":["React","MeetupList","MongoClient","Head","DUMMY_MEETUPS","id","title","image","address","HomePage","props","meetups","getStaticProps","client","connect","db","meetupsCollection","collection","find","toArray","console","log","close","map","meetup","description","_id","toString","revalidate"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kCAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAE,OADN;AAEEC,EAAAA,KAAK,EAAE,gBAFT;AAGEC,EAAAA,KAAK,EACH,6JAJJ;AAKEC,EAAAA,OAAO,EAAE;AALX,CADoB,EAQpB;AACEH,EAAAA,EAAE,EAAE,OADN;AAEEC,EAAAA,KAAK,EAAE,iBAFT;AAGEC,EAAAA,KAAK,EACH,gKAJJ;AAKEC,EAAAA,OAAO,EAAE;AALX,CARoB,CAAtB;;AAiBA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,UAAD;AAAY,MAAA,OAAO,EAAEA,KAAK,CAACC;AAA3B;AAAA;AAAA;AAAA;AAAA,YANF;AAAA,kBADF;AAUD,C,CAED;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CACnB,oGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAA1B;AAEA,QAAMN,OAAO,GAAG,MAAMK,iBAAiB,CAACE,IAAlB,GAAyBC,OAAzB,EAAtB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BV,OAA3B;AAEAE,EAAAA,MAAM,CAACS,KAAP,GAbqC,CAerC;;AACA,SAAO;AACL;AACAZ,IAAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAEA,OAAO,CAACY,GAAR,CAAaC,MAAD,KAAa;AAChClB,QAAAA,KAAK,EAAEkB,MAAM,CAAClB,KADkB;AAEhCE,QAAAA,OAAO,EAAEgB,MAAM,CAAChB,OAFgB;AAGhCiB,QAAAA,WAAW,EAAED,MAAM,CAACC,WAHY;AAIhClB,QAAAA,KAAK,EAAEiB,MAAM,CAACjB,KAJkB;AAKhCF,QAAAA,EAAE,EAAEmB,MAAM,CAACE,GAAP,CAAWC,QAAX;AAL4B,OAAb,CAAZ;AADJ,KAFF;AAYL;AACA;AACA;AACA;AACAC,IAAAA,UAAU,EAAE;AAhBP,GAAP;AAkBD,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAenB,QAAf","sourcesContent":["import React from \"react\";\nimport MeetupList from \"../components/meetups/MeetupList\";\nimport { MongoClient } from \"mongodb\";\nimport Head from \"next/head\";\n\nconst DUMMY_MEETUPS = [\n  {\n    id: \"meet1\",\n    title: \"Beautiful Lake\",\n    image:\n      \"https://images.unsplash.com/photo-1503614472-8c93d56e92ce?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1111&q=80\",\n    address: \"Moraine Lake, Canada\",\n  },\n  {\n    id: \"meet2\",\n    title: \"Northern Lights\",\n    image:\n      \"https://images.unsplash.com/photo-1464054313797-e27fb58e90a9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1174&q=80\",\n    address: \"Jasper National Park, Jasper, Canada\",\n  },\n];\n\nfunction HomePage(props) {\n  return (\n    <>\n      <Head>\n        <title>React Meetups</title>\n        <meta name=\"description\" content=\"A huge list of good meeting places\" />\n      </Head>\n\n      <MeetupList meetups={props.meetups} />\n    </>\n  );\n}\n\n// 1st method\n// this code will run during build process\n// data fetching for pre-rendering\nexport async function getStaticProps() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://meetmanager:ryanrocks99@cluster0.wr99p.mongodb.net/meets?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"places\");\n\n  const meetups = await meetupsCollection.find().toArray();\n\n  console.log(\"ALL MEETUPS\", meetups);\n\n  client.close();\n\n  // always return object\n  return {\n    // this will be set as props in HomePage component\n    props: {\n      meetups: meetups.map((meetup) => ({\n        title: meetup.title,\n        address: meetup.address,\n        description: meetup.description,\n        image: meetup.image,\n        id: meetup._id.toString(),\n      })),\n    },\n\n    // number of SEC nextJS will wait until it\n    // regenerates this page for incoming req\n    // if u have not set revalidate then this page\n    // will be generated just during BUILD process\n    revalidate: 10,\n  };\n}\n\n// 2nd method\n// when u want to regenerate page for every\n// incoming request use getServerSideProps\n// it will run on server after deployment\n\n// export function getServerSideProps(context) {\n//   const req = context.req;\n//   const res = context.res;\n\n//   return {\n//     props: {\n//       meetups: DUMMY_MEETUPS,\n//     },\n//   };\n// }\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}