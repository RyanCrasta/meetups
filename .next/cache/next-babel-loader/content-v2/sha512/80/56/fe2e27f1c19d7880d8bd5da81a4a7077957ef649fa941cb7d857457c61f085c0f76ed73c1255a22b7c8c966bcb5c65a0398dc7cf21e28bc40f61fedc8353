{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/ryan/practice/react/sec-23/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js\";\nimport React from \"react\";\nimport MeetUpDetail from \"../components/meetups/MeetUpDetail\";\n\nfunction MeetUpDetails(props) {\n  console.log(\"PROPS\", props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MeetUpDetail, {\n      imgSource: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n} // use if using getStaticProps in DYNAMIC page\n\n\n_c = MeetUpDetails;\nexport var __N_SSG = true;\nexport default MeetUpDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetUpDetails\");","map":{"version":3,"sources":["/home/ryan/practice/react/sec-23/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId].js"],"names":["React","MeetUpDetail","MeetUpDetails","props","console","log","meetupData","image","title","address","description"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA,sBACE;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,SAAS,EAAEA,KAAK,CAACG,UAAN,CAAiBC,KAD9B;AAEE,MAAA,KAAK,EAAEJ,KAAK,CAACG,UAAN,CAAiBE,KAF1B;AAGE,MAAA,OAAO,EAAEL,KAAK,CAACG,UAAN,CAAiBG,OAH5B;AAIE,MAAA,WAAW,EAAEN,KAAK,CAACG,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAUD,C,CAED;;;KAdSR,a;;AA4ET,eAAeA,aAAf","sourcesContent":["import React from \"react\";\nimport MeetUpDetail from \"../components/meetups/MeetUpDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction MeetUpDetails(props) {\n  console.log(\"PROPS\", props);\n  return (\n    <>\n      <MeetUpDetail\n        imgSource={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </>\n  );\n}\n\n// use if using getStaticProps in DYNAMIC page\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://meetmanager:ryanrocks99@cluster0.wr99p.mongodb.net/meets?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"places\");\n\n  // to ONLY include _id\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    // if false ur paths contains all supported meetUpId value\n    // false will show 404 if page not found\n    fallback: false,\n\n    paths: meetups.map((meetup) => ({\n      params: {\n        meetupId: meetup._id.toString(),\n      },\n    })),\n  };\n}\n\nexport async function getStaticProps(context) {\n  const meetUpId = context.params.meetupId;\n  console.log(\"%%%%\", meetUpId);\n  console.log(\"RYAAAAAAAAAAN\");\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://meetmanager:ryanrocks99@cluster0.wr99p.mongodb.net/meets?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"places\");\n\n  const selectedMeetups = await meetupsCollection.findOne({\n    _id: ObjectId(meetUpId),\n  });\n\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetups._id.toString(),\n        title: selectedMeetups.title,\n        address: selectedMeetups.address,\n        image: selectedMeetups.image,\n        description: selectedMeetups.description,\n      },\n    },\n    revalidate: 10,\n  };\n}\n\nexport default MeetUpDetails;\n"]},"metadata":{},"sourceType":"module"}